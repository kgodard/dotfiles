if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugins will be downloaded under the specified directory.
call plug#begin('~/.vim/plugged')

" Declare the list of plugins.
Plug 'tpope/vim-sensible'
Plug 'junegunn/seoul256.vim'
Plug 'tpope/vim-unimpaired'
Plug 'vim-scripts/bufexplorer.zip'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'flazz/vim-colorschemes'
"call minpac#add('twe4ked/vim-colorscheme-switcher')
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'godlygeek/tabular'
Plug 'danro/rename.vim'
Plug 'lifepillar/vim-solarized8'
Plug 'airblade/vim-gitgutter'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'kshenoy/vim-signature'
Plug 'vim-airline/vim-airline'
Plug 'Raimondi/delimitMate'
Plug 'scrooloose/syntastic'
" Plug 'ervandew/supertab'
Plug 'gregsexton/MatchTag'

" Autocomplete
Plug 'lifepillar/vim-mucomplete'

"" Languages
Plug 'aklt/plantuml-syntax'
"Plug 'tyru/open-browser.vim'
Plug 'weirongxu/plantuml-previewer.vim'
Plug 'elixir-lang/vim-elixir'
Plug 'keith/swift.vim'
Plug 'ElmCast/elm-vim'
Plug 'nono/vim-handlebars'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-haml'
Plug 'pangloss/vim-javascript'
Plug 'kchmck/vim-coffee-script'
Plug 'itspriddle/vim-jquery'
Plug 'tpope/vim-rails'
Plug 'leshill/vim-json'
Plug 'mutewinter/nginx.vim'
Plug 'timcharper/textile.vim'
Plug 'tpope/vim-endwise'
Plug 'thisivan/vim-ruby-matchit'
"Plug 'tpope/vim-cucumber'
Plug 'tpope/vim-markdown'
"Plug 'jgoulah/cocoa.vim'
Plug 'ekalinin/Dockerfile.vim'
Plug 'hail2u/vim-css3-syntax'
Plug 'othree/html5-syntax.vim'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'thomd/vim-jasmine'
Plug 'lunaru/vim-less'
Plug 'othree/yajs.vim'
Plug 'othree/es.next.syntax.vim'
Plug 'tpope/vim-jdaddy'
"if has('ruby')
"  call minpac#add('matthias-guenther/hammer.vim')
"endif
"
"" Navigation
Plug 'emilsoman/spec-outline.vim'
Plug 'kien/ctrlp.vim'
Plug 'vim-scripts/matchit.zip'
Plug 'sandeepcr529/Buffet.vim'
Plug 'majutsushi/tagbar'
Plug 'lukaszkorecki/coffeetags'

" Search
Plug 'mhinz/vim-grepper'
Plug 'junegunn/fzf'

" List ends here. Plugins become visible to Vim after this call.
call plug#end()

" map a leader
let mapleader = ","

" leader s saving
map <leader>s :w <cr>

" Grepper
let g:grepper = {}
let g:grepper.tools = ['rg', 'git', 'grep']

" leader-g to grep with ripgrep
nnoremap <Leader>g :Grepper -tool rg<CR>

" Search for the current word
nnoremap <Leader>* :Grepper -cword -noprompt<CR>

" Search for the current selection
nmap gs <plug>(GrepperOperator)
xmap gs <plug>(GrepperOperator)

" FZF
nnoremap <Leader>f :FZF<CR>
nnoremap <Leader><Leader>f :FZF ../common<CR>

" show spec outline!
map <silent> <Leader>ss :SpecOutlineToggle<CR>

" Tagbar - browse by methods in file
nnoremap <Leader>d :TagbarToggle<CR>

" Hide highlighted search terms
nnoremap <silent> <c-space> :nohl<CR>

" ---------------
" UI
" ---------------
set ruler         " Ruler on
set number        " Line numbers on
set nowrap        " Line wrapping off
set cursorline    " Whole line higlighted
" set laststatus=2  " Always show the statusline
" set cmdheight=1   " Two lines for command line.
set list          " Show trailing spaces and tabs
set listchars=tab:▷⋅,trail:⋅,nbsp:⋅ "What to show
" set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

" ---------------
" Text Format
" ---------------
set tabstop=2
set backspace=2  " Delete everything with backspace
set shiftwidth=2 " Tabs under smart indent
set cindent
set autoindent
set smarttab
set expandtab    " hitting <tab> inserts two spaces

" ---------------
" Visual
" ---------------
set showmatch   " Show matching brackets.
set matchtime=2 " How many tenths of a second to blink

" quickfix close
map cc :ccl<CR>

" double percentage sign in command mode is expanded
" to directory of current file - http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" map double j to escape to exit insert mode
inoremap jj <Esc>

" map for hashrocket
" imap <C-e> <C-R>=expand(' => ')<CR>

" map for ruby interpolation brackets
inoremap kk #{}<Left>

" jump to end of line and keep editing
inoremap ;; <Esc> A

" display current colorscheme
nmap <leader><leader>c :colorscheme <cr>

" Window Movement
nmap <leader>w :winc w<CR>

" Window Resizing
nmap - <C-w>-
nmap = <C-w>+
nmap _ <C-w><
nmap + <C-w>>

" ---------------
" NERDTree
" ---------------
nnoremap <leader>t :NERDTreeToggle<CR>
nnoremap <leader>nf :NERDTreeFind<CR>
let NERDTreeShowBookmarks=1
let NERDTreeChDirMode=2 " Change the NERDTree directory to the root node
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" ---------------
" Fix Trailing White Space
" ---------------
map <leader>ws :%s/\s\+$//e<CR>
command! FixTrailingWhiteSpace :%s/\s\+$//e

" Buffet
map <leader>bf :Bufferlist<CR>

" edit another file in the same directory as current file
map <leader>e :e <C-R>=expand("%:p:h") . '/'<CR>

",v brings up my .vimrc
map <leader>v :e ~/.vimrc<CR>

" powerline setup
let g:airline_powerline_fonts = 1

" mucomplete setup
set completeopt+=menuone
set completeopt+=noselect
set shortmess+=c " Shut off completion messages
set belloff+=ctrlg " If Vim beeps during completion
let g:mucomplete#enable_auto_at_startup = 1
" let g:mucomplete#completion_delay = 1

" default color
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif
colo solarized8_dark
